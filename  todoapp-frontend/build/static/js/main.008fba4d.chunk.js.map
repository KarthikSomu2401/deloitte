{"version":3,"sources":["logo.svg","components/login.component.js","components/navbar.component.js","components/dashboard.component.js","App.js","reportWebVitals.js","index.js"],"names":["cookies","Cookies","Login","props","state","userName","password","myChangeHandler","event","target","name","value","setState","handleSubmit","bind","preventDefault","formdata","this","requestOptions","method","headers","body","JSON","stringify","fetch","process","then","response","json","data","Promise","resolve","reject","console","log","set","setTimeout","window","location","href","className","onSubmit","type","placeholder","onChange","Button","Component","NavHeader","logoutHandler","remove","get","string","charAt","toUpperCase","slice","capitalize","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onClick","Dashboard","myTasksArrange","tasks","scrollStyle","overflowX","postData","map","task","Fragment","taskName","taskDateTime","style","taskDescription","complete","handleComplete","handleDelete","displayData","userTasks","concat","currentId","updateTaskName","updateTaskDescription","updateTaskDateTime","Date","myTasksRefresh","deleteTask","taskToDeleteId","userTasksOriginal","filter","seeCompleted","handleUpdate","getFreshData","utcString","toUTCString","isComplete","completed","length","tabIndex","role","aria-labelledby","aria-hidden","data-dismiss","htmlFor","hidden","displayCompleted","displayNonCompleted","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.008fba4d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\nimport { FaUserPlus } from \"react-icons/fa\";\nimport Button from \"react-bootstrap/Button\";\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies();\n\nexport default class Login extends Component {\n    state = {\n        userName: \"\",\n        password: \"\",\n    };\n\n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.myChangeHandler = this.myChangeHandler.bind(this);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let formdata = {\n            userName: this.state.userName,\n            password: this.state.password,\n        };\n        const requestOptions = {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(formdata),\n        };\n        fetch(`${process.env.REACT_APP_API_URL}/auth/loginuser`, requestOptions)\n            .then((response) => response.json())\n            .then(function (data) {\n                const promise1 = new Promise(function (resolve, reject) {\n                    console.log(data);\n                    cookies.set(\"userName\", data.userName);\n                    setTimeout(function () {\n                        resolve();\n                    }, 1000);\n                });\n                promise1.then(function (value) {\n                    window.location.href = \"#/dashboard\";\n                });\n            });\n    }\n\n    myChangeHandler = (event) => {\n        let { name, value } = event.target;\n        this.setState({ [name]: value });\n    };\n\n    render() {\n        return (\n            <div className=\"auth-wrapper\">\n                <div className=\"auth-inner\">\n                    <form onSubmit={this.handleSubmit}>\n                        <h3>Sign In</h3>\n\n                        <div className=\"form-group\">\n                            <label>Username</label>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Enter username\"\n                                name=\"userName\"\n                                value={this.state.userName}\n                                onChange={this.myChangeHandler}\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label>Password</label>\n                            <input\n                                type=\"password\"\n                                className=\"form-control\"\n                                placeholder=\"Enter password\"\n                                name=\"password\"\n                                value={this.state.password}\n                                onChange={this.myChangeHandler}\n                            />\n                        </div>\n\n                        <button type=\"submit\" className=\"btn btn-primary btn-block\">\n                            Sign In\n            </button>\n                        <p className=\"forgot-password text-right\">\n                            Forgot <a href=\"#\">password?</a>\n                        </p>\n                        <hr />\n                        <Button href=\"/register\" className=\"btn btn-warning btn-block\">\n                            <FaUserPlus /> Register\n            </Button>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { FaBars } from \"react-icons/fa\";\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies();\n\nclass NavHeader extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            userName: \"\"\n        };\n        this.logoutHandler = this.logoutHandler.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({ userName: cookies.get(\"userName\") });\n    }\n\n    logoutHandler = function (event) {\n        event.preventDefault();\n        cookies.remove(\"userName\");\n        window.location.href = \"/\";\n    }\n\n    capitalize(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n\n    render() {\n        return (\n            <div>\n                <nav className=\"mb-1 navbar navbar-expand-lg navbar-light bg-light navcolor-light\">\n                    <a className=\"navbar-brand nav-title\" href=\"dashboard/\">\n                        Hi, {this.capitalize(this.state.userName)}\n                    </a>\n                    <span\n                        className=\"navbar-toggler\"\n                        type=\"button\"\n                        data-toggle=\"collapse\"\n                        data-target=\"#navbarSupportedContent-555\"\n                        aria-controls=\"navbarSupportedContent-555\"\n                        aria-expanded=\"false\"\n                        aria-label=\"Toggle navigation\"\n                    >\n                        <FaBars />\n                    </span>\n                    <div\n                        className=\"collapse navbar-collapse\"\n                        id=\"navbarSupportedContent-555\"\n                    >\n                        {/* <ul className=\"navbar-nav mr-auto\">\n                            <li className=\"nav-item\">\n                                <a className=\"nav-link nav-title\" href=\"dashboard/\">\n                                    Home\n                </a>\n                            </li>\n                            <li className=\"nav-item\">\n                                <a className=\"nav-link nav-title\" href=\"/add-article\">\n                                    Add Article\n                </a>\n                            </li>\n                        </ul> */}\n                        <ul className=\"navbar-nav ml-auto nav-flex-icons\">\n                            {/* <li className=\"nav-item\">\n                                <a className=\"nav-link nav-title\" href=\"/add-article\">\n                                    {this.state.userName}\n                                </a>\n                            </li> */}\n                            <li className=\"nav-item\">\n                                <a className=\"nav-link nav-title\" href=\"javascript:void(0)\" onClick={this.logoutHandler}>\n                                    Logout\n                                </a>\n                            </li>\n                        </ul>\n                    </div>\n                </nav>\n            </div>\n        );\n    }\n}\n\nexport default () => (\n    <div>\n        <NavHeader />\n    </div>\n);","import React, { Component, useState } from \"react\";\nimport NavHeader from \"./navbar.component\";\nimport Cookies from \"universal-cookie\";\nimport { FaCheck, FaEdit, FaRegPlusSquare, FaTrash } from \"react-icons/fa\";\nimport DateTimePicker from 'react-datetime-picker';\nconst cookies = new Cookies();\n\nexport default class Dashboard extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userName: \"\",\n            userTasksOriginal: [],\n            userTasks: [],\n            taskName: \"\",\n            currentId: 0,\n            taskDescription: \"\",\n            taskDateTime: new Date(),\n            updateTaskName: \"\",\n            updateTaskDescription: \"\",\n            updateTaskDateTime: new Date(),\n            seeCompleted: false,\n\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleUpdate = this.handleUpdate.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n        this.myChangeHandler = this.myChangeHandler.bind(this);\n    }\n    myTasksArrange = function (tasks) {\n        const scrollStyle = {\n            overflowX: 'scroll'\n        }\n        const postData = tasks.map((task) => (\n            <React.Fragment key={task.id}>\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <div className=\"row\">\n                            <div className=\"col-lg-2 col-md-2 col-sm-2 col-xs-2\"><h3 className=\"float-left\">{task.taskName}</h3></div>\n                            <div className=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\"><p className=\"float-left\">{task.taskDateTime}</p></div>\n                            <div className=\"col-lg-5 col-md-5 col-sm-5 col-xs-5\" style={scrollStyle}> <p className=\"float-left\">{task.taskDescription}</p></div>\n                            <div className=\"col-lg-2 col-md-2 col-sm-2 col-xs-2\">{task.complete ? <span></span> : <button className=\"btn btn-success crd-btn float-right\" onClick={() => this.handleComplete(task.id)}><FaCheck /></button>}<button className=\"btn btn-danger crd-btn float-right\" onClick={() => this.handleDelete(task.id)}><FaTrash /></button>{task.complete ? <span></span> : <button className=\"btn btn-primary crd-btn float-right\" data-toggle=\"modal\" data-target=\"#updateTaskModal\" onClick={this.displayData(task)}><FaEdit /></button>}</div>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment >\n        ));\n\n        this.setState({\n            userTasks: this.state.userTasks.concat(postData),\n        });\n    };\n    displayData = function (value) {\n        this.setState({\n            currentId: value.id,\n            updateTaskName: value.taskName,\n            updateTaskDescription: value.taskDescription,\n            updateTaskDateTime: new Date(value.taskDateTime),\n        })\n    }\n\n    myTasksRefresh = function (tasks) {\n        const scrollStyle = {\n            overflowX: 'scroll'\n        }\n        this.setState({\n            userTasks: [],\n        });\n        const postData = tasks.map((task) => (\n            <React.Fragment key={task.id}>\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <div className=\"row\">\n                            <div className=\"col-lg-2 col-md-2 col-sm-2 col-xs-2\"><h3 className=\"float-left\">{task.taskName}</h3></div>\n                            <div className=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\"><p className=\"float-left\">{task.taskDateTime}</p></div>\n                            <div className=\"col-lg-5 col-md-5 col-sm-5 col-xs-5\" style={scrollStyle}> <p className=\"float-left\">{task.taskDescription}</p></div>\n                            <div className=\"col-lg-2 col-md-2 col-sm-2 col-xs-2\">{task.complete ? <span></span> : <button className=\"btn btn-success crd-btn float-right\" onClick={() => this.handleComplete(task.id)}><FaCheck /></button>}<button className=\"btn btn-danger crd-btn float-right\" onClick={() => this.handleDelete(task.id)}><FaTrash /></button>{task.complete ? <span></span> : <button className=\"btn btn-primary crd-btn float-right\" data-toggle=\"modal\" data-target=\"#updateTaskModal\" onClick={this.displayData(task)}><FaEdit /></button>}</div>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        ));\n        this.setState({\n            userTasks: this.state.userTasks.concat(postData),\n        });\n    };\n    displayCompleted() {\n        this.seeCompleted = true;\n        this.getFreshData(cookies.get(\"userName\"), \"true\");\n    }\n    displayNonCompleted() {\n        this.seeCompleted = false;\n        this.getFreshData(cookies.get(\"userName\"), \"false\");\n    }\n    handleSubmit(event) {\n        event.preventDefault();\n        let formdata = {\n            taskName: this.state.taskName,\n            taskDescription: this.state.taskDescription,\n            utcString: this.state.taskDateTime.toUTCString(),\n            isComplete: false\n        };\n        const requestOptions = {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(formdata),\n        };\n        fetch(`${process.env.REACT_APP_API_URL}/todo/create-task?userName=${cookies.get(\"userName\")}`, requestOptions)\n            .then((response) => response.json())\n            .then((data) => {\n                this.myTasksArrange([data]);\n                this.setState({\n                    taskName: \"\",\n                    taskDescription: \"\",\n                    taskDateTime: new Date(),\n                    userTasksOriginal: this.state.userTasksOriginal.concat(data)\n                })\n            });\n    }\n    handleUpdate(event) {\n        event.preventDefault();\n        let formdata = {\n            id: this.state.currentId,\n            taskName: this.state.updateTaskName,\n            taskDescription: this.state.updateTaskDescription,\n            utcString: this.state.updateTaskDateTime.toUTCString(),\n            isComplete: false\n        };\n        const requestOptions = {\n            method: \"PUT\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(formdata),\n        };\n        fetch(`${process.env.REACT_APP_API_URL}/todo/update-task?userName=${cookies.get(\"userName\")}`, requestOptions)\n            .then((response) => response.json())\n            .then((data) => {\n                this.getFreshData(cookies.get(\"userName\"), \"false\");\n                this.setState({\n                    updateTaskName: \"\",\n                    updateTaskDescription: \"\",\n                    updateTaskDateTime: new Date(),\n                })\n            });\n    }\n\n    deleteTask = (taskToDeleteId) => {\n        const tasks = this.state.userTasksOriginal.filter(task => task.id !== taskToDeleteId);\n        this.setState({\n            userTasksOriginal: tasks\n        });\n        this.myTasksRefresh(tasks);\n    }\n\n    handleComplete(id) {\n        const requestOptions = {\n            method: \"PUT\",\n            headers: { \"Content-Type\": \"application/json\" },\n        };\n        fetch(`${process.env.REACT_APP_API_URL}/todo/mark-complete?taskId=${id}`, requestOptions)\n            .then((data) => {\n                this.getFreshData(cookies.get(\"userName\"), \"false\");\n            });\n    }\n    handleDelete(id) {\n        const requestOptions = {\n            method: \"DELETE\",\n            headers: { \"Content-Type\": \"application/json\" },\n        };\n        fetch(`${process.env.REACT_APP_API_URL}/todo/delete-task?taskId=${id}`, requestOptions)\n            .then((data) => {\n                this.deleteTask(id);\n            });\n    }\n    getFreshData(userName, completed) {\n        const requestOptions = {\n            method: \"GET\",\n            headers: { \"Content-Type\": \"application/json\" },\n        };\n        fetch(`${process.env.REACT_APP_API_URL}/todo/get-all-tasks?userName=${userName}&completed=${completed}`, requestOptions)\n            .then((response) => response.json())\n            .then((data) => {\n                this.setState({\n                    userTasksOriginal: []\n                })\n                if (data.length > 0) {\n                    this.setState({\n                        userTasksOriginal: this.state.userTasksOriginal.concat(data)\n                    })\n                }\n                this.myTasksRefresh(data);\n            });\n    }\n    componentDidMount() {\n        if (cookies.get(\"userName\") != null) {\n            this.setState({ userName: cookies.get(\"userName\") });\n            this.getFreshData(cookies.get(\"userName\"), \"false\");\n        } else {\n            window.location.href = \"/\";\n        }\n    }\n\n    myChangeHandler = (event) => {\n        let { name, value } = event.target;\n        this.setState({ [name]: value });\n    };\n\n    render() {\n        return (\n            <div>\n                <NavHeader />\n                <br />\n                <div className=\"container-fluid\">\n                    <div className=\"modal fade\" id=\"addTaskModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"addTaskModalLabel\" aria-hidden=\"true\">\n                        <div className=\"modal-dialog\" role=\"document\">\n                            <div className=\"modal-content\">\n                                <div className=\"modal-header\">\n                                    <h5 className=\"modal-title\" id=\"addTaskModalLabel\">Create ToDo Task</h5>\n                                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                        <span aria-hidden=\"true\">&times;</span>\n                                    </button>\n                                </div>\n                                <form onSubmit={this.handleSubmit}>\n                                    <div className=\"modal-body\">\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"taskName\" className=\"col-form-label\">Name</label>\n                                            <input type=\"text\" className=\"form-control\" id=\"taskName\" name=\"taskName\" value={this.state.taskName} onChange={this.myChangeHandler} />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"taskDescription\" className=\"col-form-label\">Description</label>\n                                            <textarea className=\"form-control\" id=\"taskDescription\" name=\"taskDescription\" value={this.state.taskDescription} onChange={this.myChangeHandler}></textarea>\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"message-text\" className=\"col-form-label\">Pick Date and Time: </label>\n                                            <DateTimePicker name=\"taskDateTime\" id=\"taskDateTime\" value={this.state.taskDateTime} onChange={(value) => this.setState({ taskDateTime: value })} /></div>\n\n                                    </div>\n                                    <div className=\"modal-footer\">\n                                        <button type=\"submit\" data-toggle=\"modal\" data-target=\"#addTaskModal\" className=\"btn btn-primary\">Create Task</button>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"modal fade\" id=\"updateTaskModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"updateTaskModalLabel\" aria-hidden=\"true\">\n                        <div className=\"modal-dialog\" role=\"document\">\n                            <div className=\"modal-content\">\n                                <div className=\"modal-header\">\n                                    <h5 className=\"modal-title\" id=\"updateTaskModalLabel\">Update ToDo Task</h5>\n                                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                        <span aria-hidden=\"true\">&times;</span>\n                                    </button>\n                                </div>\n                                <form onSubmit={this.handleUpdate}>\n                                    <div className=\"modal-body\">\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"taskName\" className=\"col-form-label\">Name</label>\n                                            <input type=\"text\" className=\"form-control\" id=\"updateTaskName\" name=\"updateTaskName\" value={this.state.updateTaskName} onChange={this.myChangeHandler} />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"taskDescription\" className=\"col-form-label\">Description</label>\n                                            <textarea className=\"form-control\" id=\"updateTaskDescription\" name=\"updateTaskDescription\" value={this.state.updateTaskDescription} onChange={this.myChangeHandler}></textarea>\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"message-text\" className=\"col-form-label\">Pick Date and Time: </label>\n                                            <DateTimePicker name=\"updateTaskDateTime\" id=\"updateTaskDateTime\" value={this.state.updateTaskDateTime} onChange={(value) => this.setState({ updateTaskDateTime: value })} /></div>\n\n                                    </div>\n                                    <div className=\"modal-footer\">\n                                        <button type=\"submit\" data-toggle=\"modal\" data-target=\"#updateTaskModal\" className=\"btn btn-primary\">Update Task</button>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                            <button type=\"button\" className=\"btn btn-primary crd-btn float-right\" data-toggle=\"modal\" data-target=\"#addTaskModal\">\n                                <FaRegPlusSquare /> Add ToDo\n                            </button>\n                            <button type=\"button\" hidden={this.seeCompleted} className=\"btn btn-success crd-btn float-right\" onClick={() => this.displayCompleted()}>\n                                <FaCheck /> See Completed\n                            </button>\n                            <button type=\"button\" hidden={!this.seeCompleted} className=\"btn btn-warning crd-btn float-right\" onClick={() => this.displayNonCompleted()}>\n                                <FaCheck /> See InComplete\n                            </button>\n                        </div>\n                    </div>\n                    <div className=\"listContainer\">\n                        {this.state.userTasks.length > 0 ? this.state.userTasks : \"Nothing to Display!!!\"}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import logo from './logo.svg';\nimport './App.css';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Login from \"./components/login.component\";\nimport Dashboard from \"./components/dashboard.component\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <div className=\"App\">\n        <Route exact path=\"/\" component={Login} />\n        <Route exact path=\"/dashboard\" component={Dashboard} />\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport $ from 'jquery'; // <-to import jquery\nimport 'bootstrap';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}